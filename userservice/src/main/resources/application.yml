server:
  port: 8001

spring:
  application:
    name: user-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true
      path: /h2-console
#      h2-console 로 접속하여 admin 작업
#      JDBC URL : jdbc:h2.mem:testdb 로 변경하기
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:mem:testdb
#    username: sa



eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka

greeting:
  message: Welcome to my site.

#token:
#  expiration_time: 86400000 #하루
#  secret: user_token

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh, info, metrics, prometheus #refresh는 post로 호출해야함. gitrepo에 config 변수값 수정시 실시간으로 반영됨


logging:
  level:
    com.example.userservice.client: DEBUG

    
    
# 카프카 사용할 수 있는 어플리케이션 종류 https://cwiki.apache.org/confluence/display/KAFKA/clients

#  메시지 생산
#  $KAFKA_HOME/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic quickstart-events
#
#  메시지 소비
#  $KAFKA_HOME/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic quickstart-events \
#
#  --from-beginning

# 주키퍼 기동하기
# C:\docu\kafka-3.2.0-src>.\bin\windows\zookeeper-server-start.bat .\config\zookeeper.properties

# 카프카 서버 기동하기
# C:\docu\kafka-3.2.0-src>./bin/windows/kafka-server-start.bat ./config/server.properties

# 토픽 목록 조회하기
# C:\docu\kafka-3.2.0-src>.\bin\windows\kafka-topics.bat --bootstrap-server localhost:9092 --list

# 토픽 생성하기
# C:\docu\kafka-3.2.0-src>./bin/windows/kafka-topics.bat --bootstrap-server localhost:9092 --create --topic quickstart-events --partitions 1

# 특정 토픽 정보 조회
# C:\docu\kafka-3.2.0-src>./bin/windows/kafka-topics.bat --bootstrap-server localhost:9092 --describe --topic quickstart-events


# producer 실행 (컨슈머가 관심이 있다고 등록을 하면, 프로두서가 발행한 데이터가 전달됨 )
#  ./bin/windows/kafka-console-producer.bat --broker-list localhost:9092 --topic quickstart-events

# consumer 실행 (--from-beginning : 모든 정보를 가져오는 옵션 )
# ./bin/windows/kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic quickstart-events --from-beginning

# Kafka connect 다운로드 https://docs.confluent.io/5.5.1/connect/kafka-connect-jdbc/index.html
# curl -O http://packages.confluent.io/archive/6.1/confluent-community-6.1.0.tar.gz

# kafka Connect 설정 파일
# $KAFKA_HOME/config/connect-distributed.properties

# Kafka Connect 실행
# .\bin\windows\connect-distributed.bat .\etc\kafka\connect-distributed.properties

# Topic 목록 확인
# ./bin/kafka-topics.sh --bootstrap-server localhost:9092 --list

# kafka list 조회
# c:\docu\kafka_2.13-3.2.0\bin\windows > .\kafka-topics.bat --bootstrap-server localhost:9092 --list __consumer_offsets

# kafka consumer 등록
#  c:\docu\kafka_2.13-3.2.0\bin\windows>.\kafka-topics.bat --bootstrap-server localhost:9092 --list __consumer_offsets __consumer_offsets

# payload 의미 : 실제 전달되는 데이터

# docker image ls
# docker container ls